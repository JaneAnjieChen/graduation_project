import time
import numpy as np
from Asymmetric_Cipher import WKeygen, SKeyGen, Enc
# # 5. 公钥加密不同比特长度的信息
# TIMES = 10
# pk, sk = SKeyGen(bit_length=1024)
# wpk, wsk = WKeygen(PK=pk)
#
# a = []
# bit_length = []
#
# for b in range(0, 512, 4):
#     average_time = []
#
#     m = pow(2, b)
#     bits = b + 1
#     bit_length.append(bits)
#
#     for i in range(TIMES):
#         start = time.clock()
#         Enc(pkj=wpk, m=m)
#         end = time.clock()
#         average_time.append(end-start)
#     a.append(np.average(average_time))
#
# print(a)

a = [0.034600940000000004, 0.03287967, 0.03295376999999997, 0.03292075999999995, 0.03252374999999996, 0.032839699999999986, 0.03303824000000004, 0.03257298999999989, 0.03267120000000001, 0.03261670000000003, 0.032605510000000004, 0.03271786000000003, 0.033092770000000105, 0.03321565000000008, 0.03258115999999998, 0.03555657999999982, 0.035724559999999975, 0.03312109999999988, 0.032862979999999986, 0.03266409999999995, 0.03311857000000016, 0.03322092000000012, 0.03273257999999997, 0.03291996000000008, 0.032538999999999964, 0.03279273000000007, 0.03299886999999959, 0.03274390000000018, 0.03265385999999974, 0.03359358999999991, 0.033566949999999804, 0.035621090000000064, 0.035680020000000034, 0.03301474000000013, 0.03260463999999992, 0.032648619999999975, 0.03297276999999976, 0.032966219999999956, 0.03279034999999979, 0.03279226999999949, 0.03263435999999977, 0.03289075000000032, 0.03296289999999953, 0.03300906999999995, 0.03324370000000023, 0.0329505799999998, 0.03303855000000002, 0.034893769999999866, 0.0358834200000004, 0.032570109999999985, 0.0327404099999999, 0.0326599200000004, 0.03257879000000017, 0.03284766000000019, 0.032558990000000065, 0.032651310000000676, 0.032491399999999615, 0.03246216000000039, 0.032511510000000146, 0.032483340000000284, 0.032720069999999525, 0.032931470000000115, 0.032715260000000156, 0.033331750000000326, 0.03838120000000025, 0.03305281000000093, 0.03309746000000082, 0.0330439700000003, 0.03335207000000047, 0.032728109999999686, 0.03325524999999985, 0.03351677000000031, 0.03259564999999931, 0.03727240000000052, 0.032998800000000016, 0.032766809999998966, 0.032815160000000884, 0.03245054999999937, 0.03260183999999988, 0.03477012000000066, 0.0362134300000001, 0.032677480000000966, 0.03309797000000003, 0.0330525999999999, 0.032704240000000696, 0.03270412000000036, 0.032592440000001235, 0.03258639000000052, 0.0327310200000003, 0.03261622999999965, 0.032712110000001, 0.03289155000000008, 0.033197780000000066, 0.032472279999999284, 0.032681649999999965, 0.03405004999999939, 0.03764942000000069, 0.033102389999999815, 0.03366472000000158, 0.03292696000000035, 0.03267819000000003, 0.03366376000000102, 0.03253648000000098, 0.03267236000000011, 0.03274072999999973, 0.03265580999999855, 0.03247900000000144, 0.03301257999999905, 0.03246012000000107, 0.032578199999998246, 0.03375932999999946, 0.03302921000000083, 0.038161199999999694, 0.03383584000000184, 0.03314834000000033, 0.032665030000001136, 0.033296749999998806, 0.03261654999999948, 0.03292570999999924, 0.03299814000000083, 0.03306174000000084, 0.032757399999999846, 0.03254809000000094, 0.03249601000000126, 0.032613149999999536, 0.032612120000000286, 0.0326946300000003, 0.032879589999999584]
bit_length = []
for b in range(0, 512, 4):
    bit_length.append(b+1)

import matplotlib.pyplot as plt
from scipy import optimize

plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

plt.plot(bit_length, a, '+', color='b')

# 拟合
def f_1(x, A, B):
    return A * x + B
A1, B1 = optimize.curve_fit(f_1, bit_length, a)[0]
print(A1, B1)
x1 = np.arange(bit_length[0], bit_length[len(bit_length)-1], 0.01)
y1 = round(A1, 4)*x1 + B1
plt.plot(x1, y1, color='r', label='拟合')

plt.yticks(np.linspace(0, 0.1, 2))

plt.legend()
plt.xlabel('信息的比特长度')
plt.ylabel('加密时间（秒）')
plt.show()

